type ApiError = variant {
  InterCanisterCallError : text;
  InsufficientCyclesReceived : text;
  RequestNotFound;
  InternalError;
};
type CreateRequestInput = record {
  url : text;
  method : text;
  owner : text;
  headers : vec text;
};
type MakeRequestInput = record {
  id : text;
  body : opt text;
  headers : opt text;
};
type Request = record {
  id : text;
  url : text;
  method : text;
  owner : principal;
  headers : vec text;
};
type Result = variant { Ok : text; Err : ApiError };
type Result_1 = variant { Ok : Request; Err : ApiError };
type Result_2 = variant { Ok : vec Request; Err : ApiError };
service : {
  create_request : (CreateRequestInput) -> (Result);
  get_request : (text) -> (Result_1) query;
  get_requests : (text) -> (Result_2) query;
  make_request : (MakeRequestInput) -> (Result);
  name : () -> (text) query;
}